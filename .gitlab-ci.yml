stages:
- prepare
- prebuild
- test
- build
- package
- release
- cleanup

variables:
  CI_IMAGE: registry.gitlab.com/gitlab-org/gitlab-runner/ci:1.8.7-0
  GOROOT: /usr/local/go

image: $CI_IMAGE

# Skip all jobs except the ones that begin and end with 'docs'.
# Used for commits including ONLY documentation changes.
# https://docs.gitlab.com/ce/development/writing_documentation.html#testing
.except_docs: &except_docs
  except:
  - /(^docs[\/-].*|.*-docs$)/

.docker: &docker
  <<: *except_docs
  services:
  - docker:dind
  variables: &docker_variables
    CI_IMAGE: registry.gitlab.com/gitlab-org/gitlab-runner/ci:1.8.7-0
    DOCKER_DRIVER: overlay
    DOCKER_HOST: tcp://docker:2375
  tags:
  - docker

#
# Prepare stage
#

.image_builder: &image_builder
  <<: *docker
  stage: prepare
  image: docker:git
  script:
  - source ./ci/build_ci_image

prepare ci image:
  <<: *image_builder
  variables:
    BUILD_IMAGE: $CI_IMAGE
    BUILD_DOCKERFILE: ./dockerfiles/ci/Dockerfile
  only:
  - /\Adocker-ci-image\/.*/

prepare alpine-no-root image:
  <<: *image_builder
  variables:
    BUILD_IMAGE: registry.gitlab.com/gitlab-org/gitlab-runner/alpine-no-root:latest
    BUILD_DOCKERFILE: ./tests/dockerfiles/alpine-no-root/Dockerfile
  only:
  - /\Adocker-alpine-no-root-image\/.*/

#
# Prebuild stage
#

bindata:
  <<: *docker
  stage: prebuild
  script:
  - make docker
  artifacts:
    paths:
    - out/docker/prebuilt-x86_64.tar.xz
    - out/docker/prebuilt-arm.tar.xz
    - executors/docker/bindata.go
    - .gopath/bin
    - .gopath/.ok
    expire_in: 7d

clone test repo:
  <<: *except_docs
  stage: prebuild
  script:
  - mkdir tmp
  - succeed=0
  - for i in {1..3}; do git clone https://gitlab.com/gitlab-org/gitlab-test.git tmp/gitlab-test && succeed=1 && break; echo "retrying"; done
  - '[[ "$succeed" -eq 1 ]]'
  artifacts:
    paths:
    - tmp/gitlab-test
    expire_in: 7d

# Review docs base
.review-docs: &review-docs
  image: ruby:2.4-alpine
  before_script:
    - gem install gitlab --no-doc
    # We need to download the script rather than clone the repo since the
    # review-docs-cleanup job will not be able to run when the branch gets
    # deleted (when merging the MR).
    - apk add --update openssl
    - wget https://gitlab.com/gitlab-org/gitlab-ce/raw/master/scripts/trigger-build-docs
    - chmod 755 trigger-build-docs
  cache: {}
  dependencies: []
  variables:
    GIT_STRATEGY: none
  when: manual
  only:
    - branches

# Trigger a docs build in gitlab-docs
# Useful to preview the docs changes live
# https://docs.gitlab.com/ee/development/writing_documentation.html#previewing-the-changes-live
review-docs-deploy:
  <<: *review-docs
  stage: prebuild
  environment:
    name: review-docs/$CI_COMMIT_REF_NAME
    # DOCS_REVIEW_APPS_DOMAIN and DOCS_GITLAB_REPO_SUFFIX are secret variables
    # Discussion: https://gitlab.com/gitlab-org/gitlab-ce/merge_requests/14236/diffs#note_40140693
    url: http://$DOCS_GITLAB_REPO_SUFFIX-$CI_COMMIT_REF_SLUG.$DOCS_REVIEW_APPS_DOMAIN/$DOCS_GITLAB_REPO_SUFFIX
    on_stop: review-docs-cleanup
  script:
    - ./trigger-build-docs deploy

# Cleanup remote environment of gitlab-docs
review-docs-cleanup:
  <<: *review-docs
  stage: cleanup
  environment:
    name: review-docs/$CI_COMMIT_REF_NAME
    action: stop
  script:
    - ./trigger-build-docs cleanup

#
# Test stage
#

codequality:
  <<: *except_docs
  stage: test
  image: docker:stable-git
  services:
    - docker:stable-dind
  variables:
    DOCKER_DRIVER: overlay2
    CODECLIMATE_FORMAT: json
  cache: {}
  dependencies: []
  script:
    - ./scripts/codequality analyze -f json --dev | tee codeclimate.json
  artifacts:
    paths: [codeclimate.json]
    expire_in: 1 week

sast:
  <<: *except_docs
  stage: test
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  tags: []
  before_script: []
  cache: {}
  dependencies: []
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env SAST_CONFIDENCE_LEVEL="${SAST_CONFIDENCE_LEVEL:-3}"
        --volume "$PWD:/code"
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/sast:$SP_VERSION" /app/bin/run /code
  artifacts:
    paths: [gl-sast-report.json]

unit tests (no race):
  <<: *docker
  stage: test
  script:
    - source ci/touch_make_dependencies
    - make test

unit tests:
  <<: *docker
  stage: test
  allow_failure: true
  script:
    - source ci/touch_make_dependencies
    - CGO_ENABLED=1 TESTFLAGS="-cover -race" make test

docs check links:
  image: "registry.gitlab.com/gitlab-org/gitlab-build-images:nanoc-bootstrap-ruby-2.4-alpine"
  stage: test
  cache: {}
  dependencies: []
  before_script: []
  script:
    - mv docs/ /nanoc/content/
    - cd /nanoc
    # Build HTML from Markdown
    - bundle exec nanoc
    # Check the internal links
    - bundle exec nanoc check internal_links

integration windows:
  <<: *except_docs
  stage: test
  before_script:
  - $GODIR = "$env:GOPATH\src\gitlab.com\gitlab-org"
  - $target_path = "$GODIR\gitlab-runner"
  - $current_path = pwd
  - md $GODIR -Force
  - if (Test-Path $target_path) { cmd /c rmdir $target_path }
  - cmd /c mklink /D $target_path $current_path
  - cd $GODIR\gitlab-runner
  script:
  - $packages = (go list ./... | findstr -v "\/vendor\/" | Out-String | %{$_ -replace "\r\n"," "})
  - $testCommand = "go test $packages"
  - Invoke-Expression $testCommand
  - if ( $LASTEXITCODE -ne 0 ) { exit $LASTEXITCODE }
  allow_failure: true
  only:
  - /.*/@gitlab-org/gitlab-runner
  tags:
  - integration
  - windows

race conditions detector:
  <<: *docker
  stage: test
  script:
  - source ci/touch_make_dependencies
  - make check_race_conditions

git 1.7.1:
  <<: *except_docs
  image: centos:6
  stage: test
  variables:
    GOROOT: /usr/local/go
    GOPATH: /go
    CGO_ENABLED: 0
    OUR_PACKAGES: gitlab.com/gitlab-org/gitlab-runner/executors/shell gitlab.com/gitlab-org/gitlab-runner/shells
  before_script:
    - yum install -y -q git && git version
    - curl https://storage.googleapis.com/golang/go1.8.7.linux-amd64.tar.gz | tar zx -C $(dirname "$GOROOT")
    - export PATH=${GOROOT}/bin:$PATH
    - source ci/touch_make_dependencies
  script:
    - make test

#
# Build stage
#

.binaries: &binaries
  <<: *except_docs
  stage: build
  script:
  - source ci/touch_make_dependencies
  - export platforms=$(echo $CI_JOB_NAME | sed 's|binaries ||')
  - make build BUILD_PLATFORMS="-osarch='$platforms'"
  artifacts:
    paths:
    - out/binaries/
    expire_in: 7d
  tags:
  - docker

binaries darwin/386 darwin/amd64: *binaries
binaries freebsd/386 freebsd/amd64 freebsd/arm: *binaries
binaries linux/386 linux/amd64 linux/arm: *binaries
binaries windows/386 windows/amd64: *binaries

#
# Package stage
#

.packages: &packages
  <<: *except_docs
  stage: package
  script:
  - mkdir -p out/docker
  - touch out/docker/prebuilt-x86_64.tar.xz
  - touch out/docker/prebuilt-arm.tar.xz
  - touch executors/docker/bindata.go
  - source ci/touch_make_dependencies
  - make ${CI_JOB_NAME}
  artifacts:
    paths:
    - out/deb/
    - out/rpm/
    expire_in: 7d
  tags:
  - docker

package-deb: *packages
package-rpm: *packages

#
# Release stage
#

.release_docker_images: &release_docker_images
  <<: *docker
  stage: release
  variables: &release_docker_images_variables
    <<: *docker_variables
    PUBLISH_IMAGES: "true"
    PUSH_TO_DOCKER_HUB: "true"
    DOCKER_MACHINE_VERSION: "0.14.0"
    DOCKER_MACHINE_CHECKSUM: "a4c69bffb78d3cfe103b89dae61c3ea11cc2d1a91c4ff86e630c9ae88244db02"
    DUMB_INIT_VERSION: "1.0.2"
    DUMB_INIT_CHECKSUM: "a8defac40aaca2ca0896c7c5adbc241af60c7c3df470c1a4c469a860bd805429"
  script:
  - source ci/touch_make_dependencies
  - make release_docker_images
  tags:
  - release

.release: &release
  <<: *except_docs
  stage: release
  before_script:
  - source ci/touch_make_dependencies
  tags:
  - release

.release_s3: &release_s3
  <<: *release
  script:
  - make release_s3

.release_packagecloud: &release_packagecloud
  <<: *release
  script:
  - make release_packagecloud

.release_development: &release_development
  only:
  - branches@gitlab-org/gitlab-runner
  except:
  - master@gitlab-org/gitlab-runner
  - /(^docs[\/-].*|.*-docs$)/

.release_bleeding_edge: &release_bleeding_edge
  only:
  - master@gitlab-org/gitlab-runner
  - /\Av[0-9]+\.[0-9]+\.[0-9]+-rc[0-9]+\Z/@gitlab-org/gitlab-runner

.release_stable: &release_stable
  only:
  - /\Av[0-9]+\.[0-9]+\.[0-9]+\Z/@gitlab-org/gitlab-runner

development S3:
  <<: *release_s3
  <<: *release_development
  environment:
    name: development/s3/${CI_COMMIT_REF_NAME}
    url: https://gitlab-runner-downloads.s3.amazonaws.com/${CI_COMMIT_REF_NAME}/index.html

development docker images:
  <<: *release_docker_images
  variables:
    <<: *release_docker_images_variables
    PUBLISH_IMAGES: "false"
    PUSH_TO_DOCKER_HUB: "false"
  only:
  - branches
  except:
  - master
  - /(^docs[\/-].*|.*-docs$)/
  tags:
  - docker

bleeding edge S3:
  <<: *release_s3
  <<: *release_bleeding_edge
  environment:
    name: bleeding_edge/s3
    url: https://gitlab-runner-downloads.s3.amazonaws.com/${CI_COMMIT_REF_NAME}/index.html

bleeding edge packagecloud:
  <<: *release_packagecloud
  <<: *release_bleeding_edge
  environment:
    name: bleeding_edge/packagecloud
    url: https://packages.gitlab.com/runner/unstable

bleeding edge docker images:
  <<: *release_docker_images
  <<: *release_bleeding_edge
  environment:
    name: bleeding_edge/docker_images
    url: https://hub.docker.com/r/gitlab/gitlab-runner/tags/

stable S3:
  <<: *release_s3
  <<: *release_stable
  environment:
    name: stable/s3
    url: https://gitlab-runner-downloads.s3.amazonaws.com/${CI_COMMIT_REF_NAME}/index.html

stable packagecloud:
  <<: *release_packagecloud
  <<: *release_stable
  environment:
    name: stable/packagecloud
    url: https://packages.gitlab.com/runner/gitlab-runner

stable docker images:
  <<: *release_docker_images
  <<: *release_stable
  environment:
    name: stable/docker_images
    url: https://hub.docker.com/r/gitlab/gitlab-runner/tags/
